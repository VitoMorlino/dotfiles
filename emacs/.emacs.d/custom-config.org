#+TITLE: Emacs Custom Configuration
#+AUTHOR: Vito Morlino
#+EMAIL: contact@vitomorlino.com

This file contains a lot of code written by other emacs users that is organized
alongside my own code. Rather than trying to notate whom every little snippet
came from, I'm keeping a list of links to their repositories.

| Some code and inspiration from:      | Reference tag |
|--------------------------------------+---------------|
| [[https://github.com/hrs/dotfiles/tree/master/emacs/.emacs.d][Harry Schwartz's emacs configuration]] | =hrs/=        |
| [[https://github.com/sachac/.emacs.d][Sacha Chua's emacs configuration]]     | =sachac/=     |
| [[https://github.com/magnars/.emacs.d][Magnar Sveen's emacs configuration]]   | =magnars/=    |


Note To Self:
- To insert an emacs-lisp code block specifically, type <el [tab]
  (because we told it to do that in the Org-mode section below)
- As of Org 9.2, we can use =C-c C-,= to interactively insert a block

* Configure =use-package=
** Always ensure used packages are installed
 #+BEGIN_SRC emacs-lisp
   (setq use-package-always-ensure t)
 #+END_SRC



* Configure =dired=
Directory Editor
** Open file in its default program
 #+BEGIN_SRC emacs-lisp
   (defun vjm/dired-open-file-default-program (&optional arg file-list)
     "Opens the selected file(s) in their default program (based on
   operating system's current defaults."
     (interactive
      (let ((files (dired-get-marked-files t current-prefix-arg)))
	(list current-prefix-arg files)))
     ;; Check the current Operating System
     (cond
      ;; If we're on Microsoft Windows:
      ((string-equal system-type "windows-nt")
       (dolist (file file-list) ;for each "file" in "file-list"
	 (w32-shell-execute "open" file)))
      ;; If we're on Mac OS X
      ((string-equal system-type "darwin")
       (dired-do-shell-command "open" arg file-list))))

   (eval-after-load "dired"
     '(progn
	(define-key dired-mode-map (kbd "M-<return>") 'vjm/dired-open-file-default-program) ))
 #+END_SRC

** Make file sizes human-readable
 #+BEGIN_SRC emacs-lisp
   (setq-default dired-listing-switches "-alh")
 #+END_SRC


* Configure =ido-mode=
Interactively Do Things
** Enable IDO mode
 #+BEGIN_SRC emacs-lisp
   (setq ido-enable-flex-matching t)
   (setq ido-everwhere t)
   (ido-mode 1)
 #+END_SRC

** IDO Vertical
 #+BEGIN_SRC emacs-lisp
   (use-package ido-vertical-mode
     :ensure t
     :init ;lines under :init are only executed after the package is initialized
     (ido-vertical-mode 1))
   (setq ido-vertical-define-keys 'C-n-and-C-p-only)
 #+END_SRC

** SMEX
 #+BEGIN_SRC emacs-lisp
   (use-package smex
     :ensure t
     :init (smex-initialize)
     :bind
     ("M-x" . smex))
 #+END_SRC


* Configure =org-mode=
** Automatically use =org-mode= when opening =.txt= files
 #+BEGIN_SRC emacs-lisp
   (add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
 #+END_SRC

** Enable =org-bullets=
 =org-bullets= replaces the asterisks in =org-mode= with famcy bullets
 #+BEGIN_SRC emacs-lisp
   (use-package org-bullets
     :init
     (add-hook 'org-mode-hook 'org-bullets-mode))
 #+END_SRC

** Automatically use =auto-fill-mode=
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook 'turn-on-auto-fill)
   #+END_SRC

** =<return>= automatically indents (swap with =C-j=)
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook
	       (lambda()
		 (define-key org-mode-map (kbd "<return>") 'org-return-indent)
		 (define-key org-mode-map (kbd "C-j") 'org-return)))
   #+END_SRC

** Change the normal ... ellipsis for a folded header
 #+BEGIN_SRC emacs-lisp
   (setq org-ellipsis " ⤵")
   (set-face-attribute 'org-ellipsis nil
		       :underline nil
		       :foreground "cyan")
 #+END_SRC
** Shortcut to insert a block of elisp with =<el= or =C-c C-,=
   The structure template expansion mechanism was changed in Org 9.2, combining
   =org-insert-structure-template=, bound to =C-c C-,=.
   To continue to have the option of using the old method of typing =<'key'
   [TAB]=, we must require the =org-tempo= library

   #+BEGIN_SRC emacs-lisp
   (require 'org-tempo)
   (add-to-list 'org-structure-template-alist
	;;	'("el" .  "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC") ;; old structure
		'("el" . "src emacs-lisp" )) ;; new structure
   #+END_SRC

** When editing a code snippet (with =C-c '=)
 #+BEGIN_SRC emacs-lisp
   ;; (setq org-src-window-setup 'current-window) ;; use current window instead of opening new one
   ;; (setq org-src-window-setup 'split-window-right) ;; split current window and show edit buffer on right
   (setq org-src-window-setup 'split-window-below) ;; split current window and show edit buffer below
   ;; (setq org-src-window-setup 'other-window) ;; use =switch-to-buffer-other-window= for edit buffer
   ;; (setq org-src-window-setup 'other-frame) ;; use =switch-to-buffer-other-frame= for edit buffer
 #+END_SRC

** Collapse heading with =<tab>= even when point is not on the heading
   =t= here means that =<tab>= will function normally (eg. indent) everywhere
   except in headlines

   =whitestart= instead of =t= means that <tab> will function normally (eg. indent) when the
   point is before the first non-whitespace character
   #+BEGIN_SRC emacs-lisp
     (setq org-cycle-emulate-tab 'whitestart)
   #+END_SRC

** Ensure newline between outline items
   The default behavior of org-insert-heading-respect-content with =C-<return>=
   already ensures a newline /above/ the newly created heading (using the
   variable =org-blank-before-new-entry=). However, I want it to also ensure a
   newline /below/ the newly created heading.

   #+BEGIN_SRC emacs-lisp
     (defun vjm/org-blank-after-heading ()
       "Inserts a newline after the newly created header when
     org-insert-heading is called."
       (interactive)
       (unless (org-next-line-empty-p) ;unless the next line is already empty
	 (save-excursion (insert "\n")))) ;insert newline and return point to where it was

     (add-hook 'org-insert-heading-hook 'vjm/org-blank-after-heading)
   #+END_SRC

** Enable/Configure =org-drill=
   =org-drill= Org-Drill is an extension for Org mode. Org-Drill asdf asdf asdf
   uses a spaced repetition algorithm to conduct interactive "drill
   sessions", using org files as sources of facts to be memorised. Each topic
   is treated as a "flash card". The material to be remembered is presented to
   the student in random order. The student rates his or her recall of each
   item, and this information is used to schedule the item for later revision.
   #+BEGIN_SRC emacs-lisp
     (use-package org-drill)
   #+END_SRC

** Shortcut to insert my custom =Hotkey-Description= table
   #+begin_src emacs-lisp
     (defun vjm/create-hotkey-description-table (&optional arg)
       "Shortcut to automatically create a two-column table intended for hoykeys and their descriptions."
       (interactive)
       (if (y-or-n-p "Insert custom hotkey table? ")
	   (progn
	     (org-table-create "2x1")
	     (org-table-insert-hline)
	     (org-table-next-field)
	     (insert "Hotkey")
	     (org-table-next-field)
	     (insert "Description")
	     (org-table-move-row-down)
	     (org-table-insert-row)
	     (org-table-move-row-down)
	     (org-table-insert-hline)
	     (org-table-move-row-down)
	     (org-table-insert-hline))
       (org-table-create-or-convert-from-region arg))) ;; if not inserting custom table, revert to default behavior

     (eval-after-load "org" '(define-key org-mode-map (kbd "C-c |") nil))
     (global-set-key (kbd "C-c |") 'vjm/create-hotkey-description-table)
   #+end_src


* Configure =org-capture=
   Capture lets you quickly store notes with little interruption of your work
   flow. Org’s method for capturing new items is heavily inspired by John
   Wiegley’s excellent Remember package.
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c c") 'org-capture)
   #+END_SRC


* Buffers
** Enable iBuffer
 This is to replace the default =C-x C-b= buffer list that is not very friendly.
 #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x C-b") 'ibuffer)
 #+END_SRC

** Refresh buffer when file changes
 #+BEGIN_SRC emacs-lisp
   (global-auto-revert-mode t)
 #+END_SRC

** Split window balances all windows then switches to the new one
   When splitting a window, I invariably want to switch to the new window. This makes that automatic.
   #+BEGIN_SRC emacs-lisp
     (defun hrs/split-window-below-and-switch ()
       "Split the window horizontally, then switch to the new pane."
       (interactive)
       (split-window-below)
       (balance-windows)
       (other-window 1))

     (defun hrs/split-window-right-and-switch ()
       "Split the window vertically, then switch to the new pane."
       (interactive)
       (split-window-right)
       (balance-windows)
       (other-window 1))

     (global-set-key (kbd "C-x 2") 'hrs/split-window-below-and-switch)
     (global-set-key (kbd "C-x 3") 'hrs/split-window-right-and-switch)
   #+END_SRC

** Resize windows with arrow keys
   =C-S-up/down/left/right= was being used in =org-mode=, even after setting a
   global key, so I'm explicitly clearing the =org-mode= local keybindings that
   I'm using before remapping them.
   #+begin_src emacs-lisp
     (eval-after-load "org"
       '(progn
	  (define-key org-mode-map (kbd "<C-S-up>") nil)
	  (define-key org-mode-map (kbd "<C-S-down>") nil)
	  (define-key org-mode-map (kbd "<C-S-left>") nil)
	  (define-key org-mode-map (kbd "<C-S-right>") nil)))
   #+end_src

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<C-S-up>") 'shrink-window)
     (global-set-key (kbd "<C-S-down>") 'enlarge-window)
     (global-set-key (kbd "<C-S-left>") 'nil)
     (global-set-key (kbd "<C-S-left>") 'shrink-window-horizontally)
     (global-set-key (kbd "<C-S-right>") 'enlarge-window-horizontally)
   #+END_SRC

** Commands to halve the size of next window when split
    #+BEGIN_SRC emacs-lisp
      ;; (defun phils/halve-next-window-height ()
      ;;   "Expand current window to take half of the next window's height"
      ;;   (interactive)
      ;;   (enlarge-window (/ (window-height (next-window)) 2)))
      ;;
      ;; (global-set-key (kbd "C-c n") 'phils/halve-next-window-height)
      ;;
      ;; (defun vjm/halve-next-window-width ()
      ;;   "Expand current window to take half of the next window's height"
      ;;   (interactive)
      ;;   (enlarge-window-horizontally (/ (window-width (next-window)) 2)))
      ;;
      ;; (global-set-key (kbd "C-c f") 'vjm/halve-next-window-width)
    #+END_SRC


* General Settings
** Config Files
*** Shortcut to quickly visit emacs config
  #+BEGIN_SRC emacs-lisp
    (defun vjm/edit-emacs-config ()
      (interactive)
      (find-file "~/.emacs.d/custom-config.org"))

    (global-set-key (kbd "C-c e") 'vjm/edit-emacs-config)
  #+END_SRC

*** Shortcut to reload init file
  #+BEGIN_SRC emacs-lisp
    (defun vjm/reload-init-file ()
      (interactive)
      (load-file user-init-file))

    (global-set-key (kbd "C-c r") 'vjm/reload-init-file)
  #+END_SRC

*** Location of M-x Customize file
  When using the built-in Customize menu, save changes to a separate file, not in
  init.el
  #+BEGIN_SRC emacs-lisp
    (setq custom-file (expand-file-name "customize-auto-generated.el" user-emacs-directory))
    (load custom-file)
  #+END_SRC

** User Interface
*** Theme
  #+BEGIN_SRC emacs-lisp
    (load-theme 'tango-dark)
  #+END_SRC

*** Quiet Startup
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-screen t)
    (setq initial-scratch-message nil)
  #+END_SRC

*** Show matching parentheses
  #+BEGIN_SRC emacs-lisp
    (setq show-paren-delay 0.0)
    (show-paren-mode t)
  #+END_SRC

*** Flash screen instead of ringing bell
  #+BEGIN_SRC emacs-lisp
    (setq visible-bell t)
  #+END_SRC

*** Syntax highlighting everywhere
  #+BEGIN_SRC emacs-lisp
    (global-font-lock-mode t)
  #+END_SRC

*** Change text size
  #+BEGIN_SRC emacs-lisp
    (defun hrs/reset-text-size ()
      (interactive)
      (text-scale-set 0))

    (define-key global-map (kbd "C-)") 'hrs/reset-text-size)
    (define-key global-map (kbd "C-+") 'text-scale-increase)
    (define-key global-map (kbd "C-_") 'text-scale-decrease)
  #+END_SRC

** Editing
*** Add a newline to the bottom of a file if saved without one
  Sure, most things don't need a newline at the end of the file anymore...but,
  better safe than sorry.
  #+BEGIN_SRC emacs-lisp
    (setq require-final-newline t)
  #+END_SRC

*** Delete trailing whitespace when a buffer is saved
  #+BEGIN_SRC emacs-lisp
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
  #+END_SRC

*** Overwrite selected text
  #+BEGIN_SRC emacs-lisp
    (delete-selection-mode t)
  #+END_SRC

*** Comment/Uncomment Region or Line
  Default functionality of =comment-or-uncomment-line= ignores empty lines when
  adding comments to a region. I want it to add comments even on empty lines.
  #+BEGIN_SRC emacs-lisp
    (setq comment-empty-lines t)
  #+END_SRC

  Default functionality of =comment-or-uncomment-line= when no region is selected
  is to add a comment at the end of the line. This is not what I want. Instead, I
  want it to comment/uncomment the entire line if there is no region selected.
  #+BEGIN_SRC emacs-lisp
    (defun hrs/comment-or-uncomment-region-or-line ()
      "Comments or uncomments the region or the current line if
    there's no active region."
      (interactive)
      (let (beg end)
	(if (region-active-p)
	    (setq beg (region-beginning) end (region-end))
	  (setq beg (line-beginning-position) end (line-end-position)))
	(comment-or-uncomment-region beg end)))

    (global-set-key (kbd "M-;") 'hrs/comment-or-uncomment-region-or-line)
  #+END_SRC

*** Treat camelCase as separate words in every programming mode
  #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook 'subword-mode)
  #+END_SRC

*** Don't require sentences to end with two spaces
  #+BEGIN_SRC emacs-lisp
    (setq sentence-end-double-space nil)
  #+END_SRC

*** Set default line length
  #+BEGIN_SRC emacs-lisp
    (setq-default fill-column 80)
  #+END_SRC

*** Scroll by line (without moving point) with =M-p= and =M-n=
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "M-p") 'scroll-down-line)
      (global-set-key (kbd "M-n") 'scroll-up-line)
    #+END_SRC

** Uncategorized Settings
*** Shortcut to open my personal command reference
    #+BEGIN_SRC emacs-lisp
      (defun vjm/command-help(&optional ARG)
	"Opens my personal lists/tables of commands to remember.

	If a prefix argument of '2' or '3' is used, the current buffer is
	split vertically (2) or horizontally (3) and the file is opened
	in the new window"
	(interactive "p")
	;; If a prefix argument is supplied with C-u (or C-<AnyNumber>)
	(cond
	 ((= ARG 2) (hrs/split-window-below-and-switch))
	 ((= ARG 3) (hrs/split-window-right-and-switch))
	 ;; If current-prefix-arg is non-nil and didn't match one of the above conditions, it's not valid
	 (current-prefix-arg (message "Invalid ARG %s" ARG)))
	(find-file "~/OneDrive/notes_resources/leisure_fun_other/emacs/notes_emacs-commands-to-remember.org"))

      (global-set-key (kbd "C-c h") 'vjm/command-help)
    #+END_SRC

*** Set coding systems to UTF-8
    #+BEGIN_SRC emacs-lisp
      (prefer-coding-system 'utf-8)
      (set-language-environment 'utf-8)
      (set-default-coding-systems 'utf-8)
      (set-terminal-coding-system 'utf-8)
      (set-keyboard-coding-system 'utf-8)
    #+END_SRC

*** Open files from home directory
  Note: This is only the =default-directory= when emacs is first opened. When a
  file is open, the directory will be the one that the file is in
  #+BEGIN_SRC emacs-lisp
    (setq default-directory "~/")
  #+END_SRC

*** Increase garbage collection threshold
  Emacs comes from a time when memory was veerrryy limited, so it needed to take
  out the trash often. We're in the distant future and we can let it pile up a bit
  longer.
  #+BEGIN_SRC emacs-lisp
    (setq gc-cons-threshold 20000000)
  #+END_SRC

*** Backup Files
  By default, Emacs saves backup files in the current directory. These are the
  files ending in =~= that are cluttering up your directory lists. The following
  code stashes them all in =~/.emacs.d/backups=, where I can find them with =C-x
  C-f= (=find-file=) if I really need to.

  #+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  #+END_SRC

  Disk space is cheap. Save lots.

  #+BEGIN_SRC emacs-lisp
    (setq delete-old-versions -1)
    (setq version-control t)
    (setq vc-make-backup-files t)
    (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
  #+END_SRC

*** (disabled) Confirm closing emacs
  #+BEGIN_SRC emacs-lisp
    ;; (setq confirm-kill-emacs 'y-or-n-p)
  #+END_SRC
